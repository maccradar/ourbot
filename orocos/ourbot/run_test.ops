require("print")

import("rtt_ros")
ros.import("Configurator")
ros.import("Looper")
ros.import("ControllerInterface")
ros.import("Reference")
ros.import("PathGeneratorInterface")
ros.import("EstimatorInterface")
ros.import("Sensors")

// dummy configurator
loadComponent("configurator", "Configurator")
print.ln("Created configurator")
// dummy sensors
loadComponent("sensors", "Sensors")
print.ln("Created sensors")
loadComponent("looper", "Looper")
print.ln("Created looper")
loadComponent("controller","ExampleController")
print.ln("Created controller")
loadComponent("reference", "Reference")
print.ln("Created reference")
loadComponent("pathgenerator","ExamplePathGenerator")
print.ln("Created pathgenerator")
loadComponent("estimator","ExampleEstimator")
print.ln("Created estimator")
loadComponent("coordinator", "OCL::LuaComponent")
print.ln("Created coordinator")

// Add configurator as peer
addPeer("looper","configurator")
addPeer("controller","configurator")
addPeer("reference", "configurator")
addPeer("pathgenerator","configurator")
addPeer("estimator","configurator")
addPeer("sensors","configurator")

// Add controller, estimator, reference as peer of looper
addPeer("looper","controller")
addPeer("looper","estimator")
addPeer("looper","reference")

// Add looper and pathgenerator as peer of coordinator
addPeer("coordinator","looper")
addPeer("coordinator","pathgenerator")

// Connect ports
var ConnPolicy cp
cp.type = DATA
cp.lock_policy = LOCKED

// Controller inports
connect("controller.ref_pose_inport", "reference.ref_pose_outport", cp)
connect("controller.ref_ffw_inport", "reference.ref_ffw_outport", cp)
connect("controller.est_pose_inport", "estimator.est_pose_outport", cp)

// Reference inports
connect("reference.ref_pose_path_x_inport", "pathgenerator.ref_pose_path_x_outport", cp)
connect("reference.ref_pose_path_y_inport", "pathgenerator.ref_pose_path_y_outport", cp)
connect("reference.ref_pose_path_t_inport", "pathgenerator.ref_pose_path_t_outport", cp)

connect("reference.ref_ffw_path_x_inport", "pathgenerator.ref_ffw_path_x_outport", cp)
connect("reference.ref_ffw_path_y_inport", "pathgenerator.ref_ffw_path_y_outport", cp)
connect("reference.ref_ffw_path_t_inport", "pathgenerator.ref_ffw_path_t_outport", cp)

// Pathgenerator inports
connect("pathgenerator.est_pose_inport", "estimator.est_pose_outport", cp)
connect("pathgenerator.est_global_offset_inport", "estimator.est_global_offset_outport", cp)
connect("pathgenerator.map_obstacles_inport", "estimator.map_obstacles_outport", cp)
///////also connect with emperor

// Estimator inports
connect("estimator.cal_lidar_distances_inport", "sensors.cal_lidar_distances_outport", cp)
connect("estimator.cal_lidar_angles_inport", "sensors.cal_lidar_angles_outport", cp)
connect("estimator.cal_ir_distances_inport", "sensors.cal_ir_distances_outport", cp)
connect("estimator.cal_ir_angles_inport", "sensors.cal_ir_angles_outport", cp)
connect("estimator.cal_imul_transacc_inport", "sensors.cal_imul_transacc_outport", cp)
connect("estimator.cal_imul_dorientation_inport", "sensors.cal_imul_dorientation_outport", cp)
connect("estimator.cal_imul_orientation_inport", "sensors.cal_imul_orientation_outport", cp)
connect("estimator.cal_imur_transacc_inport", "sensors.cal_imur_transacc_outport", cp)
connect("estimator.cal_imur_dorientation_inport", "sensors.cal_imur_dorientation_outport", cp)
connect("estimator.cal_imur_orientation_inport", "sensors.cal_imur_orientation_outport", cp)
connect("estimator.cal_enc_pose_inport", "sensors.cal_enc_pose_outport", cp)
connect("estimator.cal_motor_current_inport", "sensors.cal_motor_current_outport", cp)
connect("estimator.cal_lidar_distances_inport", "sensors.cal_lidar_distances_outport", cp)
connect("estimator.cal_lidar_angles_inport", "sensors.cal_lidar_angles_outport", cp)

connect("estimator.cmd_velocity_inport", "controller.cmd_velocity_outport", cp)

// Dummy
sensors.configure()

// run coordinator
coordinator.exec_file("Coordinator/launch_fsm.lua")
coordinator.configure

// Start components
coordinator.start




