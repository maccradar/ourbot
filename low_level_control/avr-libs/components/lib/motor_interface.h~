#ifndef MOTOR_H
#define MOTOR_H

#include "WProgram.h"
#include "encoder_interface.h"
#include "encoder.h"
#include "current_sensor_interface.h"
#include "current_sensor_analog.h"

#define MOTOR_PIN_SINGLE

class Motor
{
private:
	const uint8_t _ID;
	
	/*motor pins*/
	const uint8_t _pinH1;		//direction pin on H-bridge
	const uint8_t _pinPWM;		//pwm pin on H-bridge
	

	const int16_t *_Vbat;		//reference to motor battery voltage
	int16_t _Vmot;				//motor pwm-ed armature voltage
	bool _H1;				//direction pin value
	uint8_t _pwm;				//pwm value
	
	
#ifndef MOTOR_PIN_SINGLE
	const uint8_t _pinH2;
	const bool _H2;
#endif //MOTOR_PIN_SINGLE

	/*Additional Hardware*/
	const EncoderInterface 			*_encoder;			//reference to the encoder
	const CurrentSensorInterface	*_current_sensor;	//reference to the current sensor

public:
#ifdef MOTOR_PIN_SINGLE
	Motor(uint8_t ID, uint8_t pinH1, uint8_t pinPWM, int16_t *Vbat);
#else
	Motor(uint8_t ID, uint8_t pinH1, uint8_t pinH2, uint8_t pinPWM, int16_t *Vbat);
#endif

	virtual void init();
	virtual unsigned long readEncoder();
	virtual int16_t readCurrent();
	
	uint8_t ID();
	int16_t Vbat();
	int16_t Vmot();
	int16_t PWM();
	
	void setVmot(int Vmot);		//High level motor voltage control
	void setDir(bool dir);		//Low level direction control - set true for a positive armature voltage
	void setPWM(uint8_t pwm);	//Low level pwm control
};

#endif //MOTOR_H
