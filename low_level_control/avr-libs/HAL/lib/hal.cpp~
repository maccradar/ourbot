#include "hal.h"

HALInterface::HALInterface()
{	
	#ifdef AD_RESOLUTION
		analogReadResolution(AD_RESOLUTION);
	#endif
	
	pinMode(BATTERY_PIN, INPUT);
	//this->VBat(); //init battery voltage
	
	//Wire.begin();
	//delay(100);
}

void HAL::start()
{
	uint8_t k;
#if MOTOR_ENABLE > 0
	for(k=0;k<MOTOR_ENABLE;k++) _motors[k]->init();
#endif
#if STEPPER_ENABLE > 0
	for(k=0;k<STEPPER_ENABLE;k++) _steppers[k]->init();
#endif
#if LED_ENABLE > 0
	for(k=0;k<LED_ENABLE;k++) _leds[k]->init();
#endif
#if SENSOR1D_ENABLE > 0
	for(k=0;k<SENSOR1D_ENABLE;k++) _sensors[k]->init();
#endif

}

#if MOTOR_ENABLE > 0
Motor* HAL::motorID(uint8_t ID)
{
	uint8_t i=0;
	while(i<MOTOR_ENABLE){
		if(_motors[i]->ID()==ID){
			break;
		}
		i++;
	}
	
	return _motors[i];
}

Motor* HAL::motorAR(uint8_t AR)
{
	return _motors[AR];
}

#endif

#if STEPPER_ENABLE > 0
Stepper* HAL::stepperID(uint8_t ID)
{
	uint8_t i=0;
	while(i<STEPPER_ENABLE){
		if(_steppers[i]->ID()==ID){
			break;
		}
		i++;
	}
	
	return _steppers[i];
}

Stepper* HAL::stepperAR(uint8_t AR)
{
	return _steppers[AR];
}

#endif

#if LED_ENABLE > 0
LED* HAL::led(uint8_t AR)
{
	return _leds[AR];
}

LED* HAL::onboardLed()
{
	return _leds[0];
}
#endif

#if IMU_ENABLE > 0
/*IMU* HAL::imuID(uint8_t ID)
{
	uint8_t i=0;
	while(i<IMU_ENABLE){
		if(_imus[i]->ID()==ID){
			break;
		}
		i++;
	}
	
	return imuAR(i);
}*/

IMU* HAL::imuAR(uint8_t AR)
{
	return &_imus[AR];
}
#endif

#ifdef BATTERY_ENABLE
int16_t HAL::VBat()
{
	_VBat = (int16_t)(analogRead(BATTERY_PIN)*BATTERY_MULT);
	return _VBat;
}

int16_t HAL::VBatpeek()
{
	return _VBat;
}
#endif

